"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = void 0;
const tslib_1 = require("tslib");
const fs = require("fs");
const path = require("path");
const devkit_1 = require("@nx/devkit");
const chalk = require("chalk");
function normalizeOptions(options, context) {
    var _a, _b, _c, _d;
    // If we're not generating package.json file, then copy it as-is as an asset.
    const assets = options.generatePackageJson
        ? options.assets
        : [
            ...options.assets,
            (0, devkit_1.joinPathFragments)(context.projectGraph.nodes[context.projectName].data.root, 'package.json'),
        ];
    if (!options.bundle && options.thirdParty) {
        devkit_1.logger.info(chalk.yellow(`Your build has conflicting options, ${chalk.bold('bundle:false')} and ${chalk.bold('thirdParty:true')}. Your package.json depedencies might not be generated correctly so we added an update ${chalk.bold('thirdParty:false')}`));
    }
    const thirdParty = !options.bundle ? false : options.thirdParty;
    let userDefinedBuildOptions;
    if (options.esbuildConfig) {
        const userDefinedConfig = path.resolve(context.root, options.esbuildConfig);
        if (options.esbuildOptions)
            throw new Error(`Cannot use both esbuildOptions and esbuildConfig options. Remove one of them and try again.`);
        if (!fs.existsSync(userDefinedConfig))
            throw new Error(`Path of esbuildConfig does not exist: ${userDefinedConfig}`);
        userDefinedBuildOptions = require(userDefinedConfig);
    }
    else if (options.esbuildOptions) {
        userDefinedBuildOptions = options.esbuildOptions;
    }
    if (((_a = options.additionalEntryPoints) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        const { outputFileName } = options, rest = tslib_1.__rest(options, ["outputFileName"]);
        if (outputFileName) {
            throw new Error(`Cannot use outputFileName and additionalEntry points together. Please remove outputFileName and try again.`);
        }
        return Object.assign(Object.assign({}, rest), { thirdParty,
            assets,
            userDefinedBuildOptions, external: (_b = options.external) !== null && _b !== void 0 ? _b : [], singleEntry: false, 
            // Use the `main` file name as the output file name.
            // This is needed for `@nx/js:node` to know the main file to execute.
            // NOTE: The .js default extension may be replaced later in getOutfile() call.
            outputFileName: `${path.parse(options.main).name}.js` });
    }
    else {
        return Object.assign(Object.assign({}, options), { thirdParty,
            assets,
            userDefinedBuildOptions, external: (_c = options.external) !== null && _c !== void 0 ? _c : [], singleEntry: true, outputFileName: 
            // NOTE: The .js default extension may be replaced later in getOutfile() call.
            (_d = options.outputFileName) !== null && _d !== void 0 ? _d : `${path.parse(options.main).name}.js` });
    }
}
exports.normalizeOptions = normalizeOptions;
