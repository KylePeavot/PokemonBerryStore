"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compat = exports.configurationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const get_import_path_1 = require("@nx/js/src/utils/get-import-path");
const init_1 = require("../init/init");
function configurationGenerator(tree, options) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const task = yield (0, init_1.esbuildInitGenerator)(tree, Object.assign(Object.assign({}, options), { skipFormat: true }));
        (_a = options.buildTarget) !== null && _a !== void 0 ? _a : (options.buildTarget = 'build');
        checkForTargetConflicts(tree, options);
        addBuildTarget(tree, options);
        yield (0, devkit_1.formatFiles)(tree);
        return task;
    });
}
exports.configurationGenerator = configurationGenerator;
function checkForTargetConflicts(tree, options) {
    var _a;
    if (options.skipValidation)
        return;
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    if ((_a = project.targets) === null || _a === void 0 ? void 0 : _a[options.buildTarget]) {
        throw new Error(`Project "${options.project}" already has a ${options.buildTarget} target. Pass --skipValidation to ignore this error.`);
    }
}
function addBuildTarget(tree, options) {
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const packageJsonPath = (0, devkit_1.joinPathFragments)(project.root, 'package.json');
    if (!tree.exists(packageJsonPath)) {
        const importPath = options.importPath || (0, get_import_path_1.getImportPath)(tree, options.project);
        (0, devkit_1.writeJson)(tree, packageJsonPath, {
            name: importPath,
            version: '0.0.1',
        });
    }
    const tsConfig = getTsConfigFile(tree, options);
    const buildOptions = {
        main: getMainFile(tree, options),
        outputPath: (0, devkit_1.joinPathFragments)('dist', project.root === '.' ? options.project : project.root),
        outputFileName: 'main.js',
        tsConfig,
        assets: [],
        platform: options.platform,
    };
    if (options.platform === 'browser') {
        buildOptions.outputHashing = 'all';
        buildOptions.minify = true;
    }
    if (tree.exists((0, devkit_1.joinPathFragments)(project.root, 'README.md'))) {
        buildOptions.assets = [
            {
                glob: `${project.root}/README.md`,
                input: '.',
                output: '.',
            },
        ];
    }
    (0, devkit_1.updateProjectConfiguration)(tree, options.project, Object.assign(Object.assign({}, project), { targets: Object.assign(Object.assign({}, project.targets), { [options.buildTarget]: {
                executor: '@nx/esbuild:esbuild',
                outputs: ['{options.outputPath}'],
                defaultConfiguration: 'production',
                options: buildOptions,
                configurations: {
                    development: {
                        minify: false,
                    },
                    production: {
                        minify: true,
                    },
                },
            } }) }));
}
function getMainFile(tree, options) {
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const candidates = [
        (0, devkit_1.joinPathFragments)(project.root, 'src/main.ts'),
        (0, devkit_1.joinPathFragments)(project.root, 'src/index.ts'),
    ];
    for (const file of candidates) {
        if (tree.exists(file))
            return file;
    }
    return options.main;
}
function getTsConfigFile(tree, options) {
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const candidates = [
        (0, devkit_1.joinPathFragments)(project.root, 'tsconfig.lib.json'),
        (0, devkit_1.joinPathFragments)(project.root, 'tsconfig.app.json'),
    ];
    for (const file of candidates) {
        if (tree.exists(file))
            return file;
    }
    return options.tsConfig;
}
exports.compat = (0, devkit_1.convertNxGenerator)(configurationGenerator);
exports.default = configurationGenerator;
